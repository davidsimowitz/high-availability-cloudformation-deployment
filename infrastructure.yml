Description: >
  High-Availability Deployment Configuration.

Parameters:

  ENV:
    Description: Environment name.
    Type: String
    Default: DEV

  VpcCidr:
    Description: IP range (CIDR notation) for this VPC.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCidr1:
    Description: IP range (CIDR notation) for Public Subnet in 1st Availability Zone.
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetCidr2:
    Description: IP range (CIDR notation) for Public Subnet in 2nd Availability Zone.
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnetCidr1:
    Description: IP range (CIDR notation) for Private Subnet in 1st Availability Zone.
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnetCidr2:
    Description: IP range (CIDR notation) for Private Subnet in 2nd Availability Zone.
    Type: String
    Default: 10.0.3.0/24

  AllAddresses:
    Description: IP range (CIDR notation) representing all addresses in IPv4 space.
    Type: String
    Default: 0.0.0.0/0

  ServerInstance:
    Description: Application server instance type.
    Type: String
    Default: t3.medium

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-INTERNET-GATEWAY

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PUB-SUBNET-1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCidr2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PUB-SUBNET-2
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCidr1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PRIV-SUBNET-1
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCidr2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PRIV-SUBNET-2
      VpcId: !Ref VPC

  EipAddressNatGateway1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipAddressNatGateway1.AllocationId
      SubnetId: !Ref PublicSubnet1

  EipAddressNatGateway2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipAddressNatGateway2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PUB-ROUTES
      VpcId: !Ref VPC

  PublicRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref AllAddresses
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn: InternetGatewayAttachment

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PRIV-ROUTES-1
      VpcId: !Ref VPC

  PrivateRouteDefault1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref AllAddresses
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1
    DependsOn: InternetGatewayAttachment

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-PRIV-ROUTES-2
      VpcId: !Ref VPC

  PrivateRouteDefault2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref AllAddresses
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2
    DependsOn: InternetGatewayAttachment

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Description: Pull down latest development app from S3 bucket to server.
      RoleName: !Join ["-", [!Ref "AWS::Region", dev-app-downloader]]
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-APP-DOWNLOADER

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [!Ref ENV, app-instance-profile, !Ref "AWS::Region"]]
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
    DependsOn: UdacityS3ReadOnlyEC2

  S3ReadOnlyAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3ReadOnly
      PolicyDocument:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "s3:Get*",
                        "s3:List*"
                    ],
                    "Resource": "*"
                }
            ]
        }
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
    DependsOn: UdacityS3ReadOnlyEC2

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      GroupName: !Join ["-", [!Ref ENV, load-balancer-security-group, !Ref "AWS::Region"]]
      SecurityGroupEgress:
        - CidrIp: !Ref AllAddresses
          Description: Allow HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      SecurityGroupIngress:
        - CidrIp: !Ref AllAddresses
          Description: Allow HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-LOAD-BALANCER-SECURITY-GROUP
      VpcId: !Ref VPC

  ApplicationServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      GroupName: !Join ["-", [!Ref ENV, app-server-security-group, !Ref "AWS::Region"]]
      SecurityGroupEgress:
        - CidrIp: !Ref AllAddresses
          Description: Allow all outgoing traffic
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: !Ref AllAddresses
          Description: Allow HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: !Ref AllAddresses
          Description: Allow SSH
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-APP-SERVER-SECURITY-GROUP
      VpcId: !Ref VPC

  ApplicationLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
              - DeviceName: "/dev/sdb"
                Ebs:
                    DeleteOnTermination: true
                    Encrypted: false
                    VolumeSize: 10
                    VolumeType: 'gp2'
      EbsOptimized: false
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: ami-0d1cd67c26f5fca19
      InstanceMonitoring: true
      InstanceType: !Ref ServerInstance
      KeyName: private-server-devops-key
      PlacementTenancy: default
      SecurityGroups:
        - !Ref ApplicationServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
          sed -i 's/It Works!/It works! Udagram, Udacity/g' index.html

  ApplicationServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join ["-", [!Ref ENV, auto-scaling-group, !Ref "AWS::Region"]]
      Cooldown: 300
      DesiredCapacity: 4
      HealthCheckGracePeriod: 240
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref ApplicationLaunchConfiguration
      MaxSize: 8
      MinSize: 4
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${ENV}-APP-SERVER
      TargetGroupARNs:
        - !Ref ApplicationLoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ["-", [!Ref ENV, LOAD-BALANCER, !Ref "AWS::Region"]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ENV}-APP-LOAD-BALANCER
      Type: application

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
    DependsOn: ApplicationLoadBalancerTargetGroup

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1
    DependsOn: ApplicationLoadBalancerListener

Outputs:

  VPC:
    Description: Reference to virtual private cloud
    Value: !Ref VPC
    Export:
      Name: !Sub ${ENV}-VPC-ID

  PublicSubnet1:
    Description: Reference to public subnet in first availability zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ENV}-PUB-NET-1

  PublicSubnet2:
    Description: Reference to public subnet in second availability zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ENV}-PUB-NET-2

  PublicSubnets:
    Description: Reference list of public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${ENV}-PUB-NETS

  PrivateSubnets:
    Description: Reference list of private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${ENV}-PRIV-NETS
